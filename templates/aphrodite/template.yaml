apiVersion: batch.volcano.sh/v1alpha1
kind: Job
metadata:
  name: {{deployment_id}}
  labels:
    # must have this label
    kalavai.job.name: {{deployment_id}}
spec:
  queue: default
  schedulerName: volcano
  plugins:
    env: []
    svc: ["--disable-network-policy=true"]
  maxRetries: {{max_retries}}
  tasks:
{% if litellm_key != "" %}
  - replicas: 1   # One ps pod specified
    name: registrar
    policies:
    - event: PodEvicted
      action: RestartJob
    - event: PodFailed
      action: RestartJob
    - event: TaskCompleted
      action: RestartJob
    - event: Unknown
      action: RestartJob
    template: # Definition of the ps pod
      terminationGracePeriodSeconds: 30 #give enough time to the preStop hook
      metadata:
        labels:
          kalavai.job.name: {{deployment_id}}
      spec:
        {% if NODE_SELECTORS %}
        affinity:
          nodeAffinity:
            requiredDuringSchedulingIgnoredDuringExecution:
              nodeSelectorTerms:
            {% if NODE_SELECTORS_OPS == "OR" %}
              {% for selector in NODE_SELECTORS %}
              - matchExpressions:
                - key: {{selector.name}}
                  operator: In
                  values:
                  {% for vals in selector.value %}
                  - "{{vals}}"
                  {% endfor %}
              {% endfor %}
            {% else %}
              - matchExpressions:
              {% for selector in NODE_SELECTORS %}
                {% for vals in selector.value %}
                - key: {{selector.name}}
                  operator: In
                  values:
                  - "{{vals}}"
                {% endfor %}
              {% endfor %}
            {% endif %}
        {% endif %}
        containers:
        - name: registrar-leader
          image: docker.io/bundenth/kalavai-utils:latest
          command:
          - sh
          - -c
          - |
            echo "Waiting for model to be served..."
            PS_HOST=`cat /etc/volcano/server.host`;
            /workspace/wait_for_service.sh --servers="$PS_HOST" --port=8080
            export MODEL_API_BASE="http://"$PS_HOST"."$VC_NAMESPACE":8080/v1";
            /workspace/start_point.sh \
              --litellm_kalavai_extras='{{litellm_kalavai_extras}}' \
              --litellm_access_group={{litellm_access_group}}
          env:
          - name: VC_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: LITELLM_MODEL_NAME
          {% if model_name_override != "" %}
            value: "{{model_name_override}}"
          {% else %}
            value: "{{model_id}}"
          {% endif %}
          - name: LITELLM_BASE_URL
            value: {{litellm_base_url}}
          - name: LITELLM_KEY
            value: {{litellm_key}}
          - name: MODEL_ID
            value: {{model_id}}
          - name: DEPLOYMENT_ID
            value: {{deployment_id}}
          - name: PROVIDER
            value: hosted_vllm
          lifecycle:
            preStop:
              exec:
                command: 
                - sh
                - -c
                - |
                  /workspace/cleanup.sh
          resources:
            requests:
              cpu: 0.05
              memory: 0.05Gi
            limits:
              cpu: 0.05
              memory: 0.05Gi
        restartPolicy: OnFailure
{% endif %}
  - replicas: 1   # One ps pod specified
    name: server
    policies:
    - event: PodEvicted
      action: RestartJob
    - event: PodFailed
      action: RestartJob
    - event: TaskCompleted
      action: RestartJob
    - event: Unknown
      action: RestartJob
    template: # Definition of the ps pod
      metadata:
        labels:
          role: leader
          kalavai.job.name: {{deployment_id}}
      spec:
        runtimeClassName: nvidia
        {% if NODE_SELECTORS %}
        affinity:
          nodeAffinity:
            requiredDuringSchedulingIgnoredDuringExecution:
              nodeSelectorTerms:
            {% if NODE_SELECTORS_OPS == "OR" %}
              {% for selector in NODE_SELECTORS %}
              - matchExpressions:
                - key: {{selector.name}}
                  operator: In
                  values:
                  {% for vals in selector.value %}
                  - "{{vals}}"
                  {% endfor %}
              {% endfor %}
            {% else %}
              - matchExpressions:
              {% for selector in NODE_SELECTORS %}
                {% for vals in selector.value %}
                - key: {{selector.name}}
                  operator: In
                  values:
                  - "{{vals}}"
                {% endfor %}
              {% endfor %}
            {% endif %}
        {% endif %}
        containers:
        - name: aphrodite-leader
          image: docker.io/bundenth/ray-aphrodite:latest
          command:
          - sh
          - -c
          - |
            # Check if model is already on s3 or download
            /home/ray/workspace/download_model.sh \
              --model_id={{model_id}} \
              --remote_dir="/home/ray/cache";
            RAY_BACKEND_LOG_LEVEL=error /home/ray/workspace/ray_init.sh leader --ray_cluster_size=$(({{workers}})) --ray_object_store_memory={{memory * 500000000}};
            sleep 30;
            nvidia-smi;
            ray status;
            # Run model
            /home/ray/workspace/run_model.sh \
              --model_id="{{model_id}}" \
              --model_path="/home/ray/cache/{{model_id}}" \
              --extra='{{extra}}' \
              --tensor_parallel_size={{tensor_parallel_size}} \
              --pipeline_parallel_size={{pipeline_parallel_size}} \
              --tool_call_parser={{tool_call_parser}}
            exit 1
          env:
          - name: HF_TOKEN
            value: {{hf_token}}
          ports:
          - containerPort: 8080
            name: model-port
          - containerPort: 8265
            name: dashboard-port
          # this blocks internal traffic, which causes issues when tasks wait for each other
          # readinessProbe:
          #   httpGet:
          #     path: /health
          #     port: 8080
          #   initialDelaySeconds: 5
          #   periodSeconds: 10
          resources:
            requests:
              cpu: {{cpus}}
              memory: {{memory}}Gi
              nvidia.com/gpu: {{gpus}}
              ephemeral-storage: {{working_memory}}Gi
            limits:
              cpu: {{cpus}}
              memory: {{memory}}Gi
              nvidia.com/gpu: {{gpus}}
              nvidia.com/gpumem-percentage: {{cuda_gpu_mem_percentage}}
              ephemeral-storage: {{working_memory}}Gi
          volumeMounts:
            - mountPath: /dev/shm
              name: dshm
            - name: cache
              mountPath: /home/ray/cache
        volumes:
        - name: cache
          emptyDir: {}
        - name: dshm
          emptyDir:
            medium: Memory
            sizeLimit: {{memory * 0.5}}Gi
        restartPolicy: OnFailure
  - replicas: {{workers - 1}}
    name: worker
    policies:
    - event: PodEvicted
      action: RestartJob
    - event: PodFailed
      action: RestartJob
    - event: TaskCompleted
      action: RestartJob
    - event: Unknown
      action: RestartJob
    policies:
    - event: TaskCompleted  # The job will be marked as completed when two worker pods finish tasks.
      action: CompleteJob
    template: # Definition of worker pods
      metadata:
        labels:
          kalavai.job.name: {{deployment_id}}
      spec:
        runtimeClassName: nvidia
        {% if NODE_SELECTORS %}
        affinity:
          nodeAffinity:
            requiredDuringSchedulingIgnoredDuringExecution:
              nodeSelectorTerms:
            {% if NODE_SELECTORS_OPS == "OR" %}
              {% for selector in NODE_SELECTORS %}
              - matchExpressions:
                - key: {{selector.name}}
                  operator: In
                  values:
                  {% for vals in selector.value %}
                  - "{{vals}}"
                  {% endfor %}
              {% endfor %}
            {% else %}
              - matchExpressions:
              {% for selector in NODE_SELECTORS %}
                {% for vals in selector.value %}
                - key: {{selector.name}}
                  operator: In
                  values:
                  - "{{vals}}"
                {% endfor %}
              {% endfor %}
            {% endif %}
        {% endif %}
        containers:
        - name: aphrodite-worker
          image: docker.io/bundenth/ray-aphrodite:latest
          command:
          - sh
          - -c
          - |
            PS_HOST=`head /etc/volcano/server.host`;
            # Check if model is already on s3 or download
            /home/ray/workspace/download_model.sh \
              --model_id={{model_id}} \
              --remote_dir="/home/ray/cache";
            nvidia-smi;
            RAY_BACKEND_LOG_LEVEL=error /home/ray/workspace/ray_init.sh worker --ray_address=$PS_HOST --ray_port=6379 --ray_object_store_memory={{memory * 500000000}} --ray_block=1
          env:
          - name: HF_TOKEN
            value: {{hf_token}}
          resources:
            requests:
              cpu: {{cpus}}
              memory: {{memory}}Gi
              nvidia.com/gpu: {{gpus}}
              ephemeral-storage: {{working_memory}}Gi
            limits:
              cpu: {{cpus}}
              memory: {{memory}}Gi
              nvidia.com/gpu: {{gpus}}
              nvidia.com/gpumem-percentage: {{cuda_gpu_mem_percentage}}
              ephemeral-storage: {{working_memory}}Gi
          volumeMounts:
            - mountPath: /dev/shm
              name: dshm
            - name: cache
              mountPath: /home/ray/cache
        volumes:
        - name: cache
          emptyDir: {}
        - name: dshm
          emptyDir:
            medium: Memory
            sizeLimit: {{memory * 0.5}}Gi
        restartPolicy: OnFailure
---
# deploy NodePort to expose model (if not using LiteLLM registration)
{% if litellm_key == "" %}
apiVersion: v1
kind: Service
metadata:
  name: {{deployment_id}}-service
  labels:
    # must have this!
    kalavai.job.name: {{deployment_id}}
spec:
  type: NodePort
  selector:
    role: leader
    kalavai.job.name: {{deployment_id}}
  ports:
    - name: main
      port: 8080
      targetPort: 8080
      protocol: TCP
    {% if nodeport != "" %}
      nodePort: {{nodeport}}
    {% endif %}
{% endif %}