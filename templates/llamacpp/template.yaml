apiVersion: batch.volcano.sh/v1alpha1
kind: Job
metadata:
  name: {{deployment_id}}
  labels:
    # must have this label
    kalavai.job.name: {{deployment_id}}
spec:
  queue: default
  schedulerName: volcano
  plugins:
    env: []
    svc: ["--disable-network-policy=true"]
  policies: 
  - event: PodEvicted # Restart the job when a pod is evicted.
    action: RestartJob
  tasks:
  - replicas: 1   # One ps pod specified
    name: registrar
    template: # Definition of the ps pod
      terminationGracePeriodSeconds: 30 #give enough time to the preStop hook
      metadata:
        labels:
          kalavai.job.name: {{deployment_id}}
      spec:
        containers:
        - name: llamacpp-registrar
          image: docker.io/bundenth/kalavai-utils:latest
          env:
          - name: VC_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          command:
          - sh
          - -c
          - |
            if [ ! -z "{{litellm_key}}" ]; then
              # wait for model to be served
              echo "Waiting for model service..."
              PS_HOST=`cat /etc/volcano/server.host`;
              /workspace/wait_for_service.sh --servers="$PS_HOST" --port=8080
              # Register model with LiteLLM
              PS_HOST=`cat /etc/volcano/server.host`;
              LITELLM_MODEL_NAME="{{deployment_id}}";
              echo "Creating new entry on LiteLLM: (host: $PS_HOST) - (model id: $LITELLM_MODEL_NAME)";
              API_BASE="http://"$PS_HOST"."$VC_NAMESPACE":8080/v1";
              /workspace/register_model.sh \
                --litellm_base_url={{litellm_base_url}} \
                --litellm_key={{litellm_key}} \
                --litellm_model_name="$LITELLM_MODEL_NAME" \
                --model_id={{model_filename}} \
                --provider=openai \
                --api_base=$API_BASE \
                --model_info='{"extra": "llamacpp parameters: {{server_extra}}", "cpus": "{{cpus}}", "gpus": "{{gpus}}", "memory": "{{memory}}", "cpu_workers": "{{cpu_workers}}", "gpu_workers": "{{gpu_workers}}"}'
            else
              echo "[Warning] Missing LiteLLM base url. Model not publicly registered"
              tail -f /dev/null
            fi
          lifecycle:
            preStop:
              exec:
                command: 
                - sh
                - -c
                - |       
                  if [ ! -z "{{litellm_key}}" ]; then
                    LITELLM_MODEL_NAME="{{deployment_id}}";         
                    MODEL_ID=$(python3 /workspace/get_litellm_id.py \
                      --litellm_url={{litellm_base_url}} \
                      --api_key={{litellm_key}} \
                      --model_name="$LITELLM_MODEL_NAME");
                    curl -X POST "{{litellm_base_url}}/model/delete" \
                        -H 'Authorization: Bearer {{litellm_key}}' \
                        -H "accept: application/json" \
                        -H "Content-Type: application/json" \
                        -d '{ "id": "'$MODEL_ID'"}';
                  fi
          resources:
            requests:
              cpu: 0.5
              memory: 0.5Gi
            limits:
              cpu: 0.5
              memory: 0.5Gi
        restartPolicy: OnFailure
  - replicas: 1   # One ps pod specified
    name: server
    template: # Definition of the ps pod
      metadata:
        # annotations:
        #   # must have these annotations
        #   {{nouse_gputype}}
        #   {{use_gputype}}
        labels:
          role: leader
          kalavai.job.name: {{deployment_id}}
      spec:
        #runtimeClassName: nvidia
        containers:
        - name: llamacpp-leader
          image: docker.io/bundenth/llamacpp-cpu:latest
          command:
          - sh
          - -c
          - |
            /workspace/build.sh server_cpu;
            /workspace/merge.sh --cpu-workers=/etc/volcano/cpu.host --gpu-workers=/etc/volcano/gpu.host --output=/workspace/all.host;
            HOSTS=`cat /workspace/all.host`;
            cat /workspace/all.host;
            export WORKERS=$(/workspace/get_workers_address.sh --rpc_port={{rpc_port}} --rpc_servers="${HOSTS}")
            /workspace/run_api_server.sh \
              --repo_id={{repo_id}} \
              --model_filename={{model_filename}} \
              --local_dir=/cache \
              --port=8080 \
              --rpc_servers=$WORKERS \
              --extra='{{server_extra}}'
          env:
          - name: HF_TOKEN
            value: {{hf_token}}
          ports:
          - containerPort: 8080
            name: model-port
          resources:
            requests:
              cpu: {{cpus}}
              memory: {{memory}}Gi
              ephemeral-storage: {{working_memory}}Gi
              #nvidia.com/gpu: {{gpus}}
            limits:
              cpu: {{cpus}}
              memory: {{memory}}Gi
              ephemeral-storage: {{working_memory}}Gi
              #nvidia.com/gpu: {{gpus}}
          volumeMounts:
            - name: cache
              mountPath: /cache
        volumes:
        - name: cache
          emptyDir: {}
        restartPolicy: OnFailure
  - replicas: {{cpu_workers}}
    name: cpu
    policies:
    - event: TaskCompleted  # The job will be marked as completed when two worker pods finish tasks.
      action: CompleteJob
    template: # Definition of worker pods
      metadata:
        labels:
          kalavai.job.name: {{deployment_id}}
      spec:
        containers:
        - name: llamacpp-worker
          image: docker.io/bundenth/llamacpp-cpu:latest
          command:
          - sh
          - -c
          - |
            /workspace/build.sh cpu;
            /workspace/run_rpc_worker.sh --rpc_port={{rpc_port}}
          env:
          - name: HF_TOKEN
            value: {{hf_token}}
          resources:
            requests:
              cpu: {{cpus}}
              memory: {{memory}}Gi
            limits:
              cpu: {{cpus}}
              memory: {{memory}}Gi
        restartPolicy: OnFailure
  - replicas: {{gpu_workers}}
    name: gpu
    policies:
    - event: TaskCompleted  # The job will be marked as completed when two worker pods finish tasks.
      action: CompleteJob
    template: # Definition of worker pods
      metadata:
        annotations:
          # must have these annotations
          {{nouse_gputype}}
          {{use_gputype}}
        labels:
          kalavai.job.name: {{deployment_id}}
      spec:
        runtimeClassName: nvidia
        containers:
        - name: llamacpp-worker
          image: docker.io/bundenth/llamacpp-gpu:latest
          command:
          - sh
          - -c
          - |
            /workspace/build.sh gpu;
            /workspace/run_rpc_worker.sh --rpc_port={{rpc_port}}
          env:
          - name: HF_TOKEN
            value: {{hf_token}}
          resources:
            requests:
              cpu: {{cpus}}
              memory: {{memory}}Gi
              nvidia.com/gpu: {{gpus}}
            limits:
              cpu: {{cpus}}
              memory: {{memory}}Gi
              nvidia.com/gpu: {{gpus}}
        restartPolicy: OnFailure
