apiVersion: apps/v1
kind: Deployment
metadata:
  name: kube-watcher-api
  namespace: {{ .Release.Namespace }}
spec:
  replicas: 1 # ensure there is minimal downtime if node goes down
  selector:
    matchLabels:
      app: kube-watcher-api
  template:
    metadata:
      labels:
        app: kube-watcher-api
    spec:
      containers:
      - name: kube-watcher-api
        image: bundenth/kube_watcher:v1.1.7
        imagePullPolicy: "IfNotPresent"
        ports:
        - containerPort: 8000
        env:
        - name: IN_CLUSTER
          value: "{{ .Values.deployment.in_cluster }}"
        - name: KW_USE_AUTH
          value: "{{ .Values.deployment.use_auth_key }}"
        - name: KW_ADMIN_KEY
          value: {{ .Values.deployment.admin_key }}
        - name: KW_WRITE_KEY
          value: {{ .Values.deployment.write_key }}
        - name: KW_READ_ONLY_KEY
          value: {{ .Values.deployment.readonly_key }}
        - name: IS_PUBLIC_POOL
          value: "{{ .Values.deployment.is_public_pool }}"
        - name: KALAVAI_API_ENDPOINT
          value: {{ .Values.deployment.kalavai_api_endpoint }}
        livenessProbe:
          httpGet:
            path: /v1/health
            port: 8000
          initialDelaySeconds: 20
          periodSeconds: 30
      serviceAccountName: api-service-account  # Service account with cluster permissions