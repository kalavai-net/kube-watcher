apiVersion: v1
kind: Namespace
metadata:
  name: kube-watcher
---
# Cluster roles and service account permissions
apiVersion: v1
kind: ServiceAccount
metadata:
  name: api-service-account
  namespace: kube-watcher
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: api-cluster-role
  namespace: kube-watcher
rules:
  - apiGroups:
        - ""
        - apps
        - autoscaling
        - batch
        - extensions
        - policy
        - rbac.authorization.k8s.io
    resources:
      - pods
      - componentstatuses
      - configmaps
      - daemonsets
      - deployments
      - events
      - endpoints
      - horizontalpodautoscalers
      - ingress
      - jobs
      - limitranges
      - namespaces
      - nodes
      - pods
      - persistentvolumes
      - persistentvolumeclaims
      - resourcequotas
      - replicasets
      - replicationcontrollers
      - serviceaccounts
      - services
    verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: api-cluster-role-binding
subjects:
- namespace: kube-watcher 
  kind: ServiceAccount
  name: api-service-account 
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: api-cluster-role 
---
## Service deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kube-watcher-api
  namespace: kube-watcher
spec:
  replicas: 2 # ensure there is minimal downtime if node goes down
  selector:
    matchLabels:
      app: kube-watcher-api
  template:
    metadata:
      labels:
        app: kube-watcher-api
    spec:
      containers:
      - name: kube-watcher-api
        image: bundenth/kube_watcher:v13
        imagePullPolicy: "IfNotPresent"
        ports:
        - containerPort: 8000
        env:
        - name: PROMETHEUS_ENDPOINT
          value: "http://10.43.164.196"
        - name: OPENCOST_ENDPOINT
          value: "http://10.43.53.194:9003"
        - name: IN_CLUSTER
          value: "True"
      serviceAccountName: api-service-account  # Service account with cluster permissions
---
apiVersion: v1
kind: Service
metadata:
  name: kube-watcher-nodeport
  namespace: kube-watcher
spec:
  type: NodePort
  ports:
  - port: 8000
    targetPort: 8000
    nodePort: 30873
  selector:
    app: kube-watcher-api